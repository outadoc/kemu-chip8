package fr.outadoc.kemu.chip8

import fr.outadoc.kemu.b
import fr.outadoc.kemu.chip8.instructionset.Chip8Instruction.*
import fr.outadoc.kemu.s

val instructionDecoderTestSuite = listOf(
    0x00E0 to cls,
    0x00EE to rts,
    0x0ABC to sys(nnn = 0xABC.s),
    0x1123 to jmp(nnn = 0x123.s),
    0x2321 to jsr(nnn = 0x321.s),
    0x3532 to skeq(x = 0x5.b, nn = 0x32.b),
    0x4026 to skne(x = 0x0.b, nn = 0x26.b),
    0x5120 to skeq2(x = 0x1.b, y = 0x2.b),
    0x6E12 to mov(x = 0xE.b, nn = 0x12.b),
    0x7777 to add(x = 0x7.b, nn = 0x77.b),
    0x8880 to mov2(x = 0x8.b, y = 0x8.b),
    0x8481 to or(x = 0x4.b, y = 0x8.b),
    0x8882 to and(x = 0x8.b, y = 0x8.b),
    0x8883 to xor(x = 0x8.b, y = 0x8.b),
    0x8654 to add2(x = 0x6.b, y = 0x5.b),
    0x8885 to sub(x = 0x8.b, y = 0x8.b),
    0x8886 to shr(x = 0x8.b, y = 0x8.b),
    0x8467 to rsb(x = 0x4.b, y = 0x6.b),
    0x888E to shl(x = 0x8.b, y = 0x8.b),
    0x9010 to skne2(x = 0x0.b, y = 0x1.b),
    0xA123 to mvi(nnn = 0x123.s),
    0xB432 to jmi(nnn = 0x432.s),
    0xC376 to rand(x = 0x3.b, nn = 0x76.b),
    0xD358 to sprite(x = 0x3.b, y = 0x5.b, n = 0x8.b),
    0xE59E to skpr(x = 0x5.b),
    0xE8A1 to skup(x = 0x8.b),
    0xFA07 to gdelay(x = 0xA.b),
    0xFC15 to sdelay(x = 0xC.b),
    0xF418 to ssound(x = 0x4.b),
    0xF01E to adi(x = 0x0.b),
    0xF129 to font(x = 0x1.b),
    0xF233 to bcd(x = 0x2.b),
    0xF355 to str(x = 0x3.b),
    0xF465 to ldr(x = 0x4.b),
)

val instructionDecoderIllegalTestSuite = listOf(
    0x512F,
    0x8128,
    0x8129,
    0x812A,
    0x9124,
    0xE26E,
    0xE29B,
    0xFA12,
    0xFA17,
)